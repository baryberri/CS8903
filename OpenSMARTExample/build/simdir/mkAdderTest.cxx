/*
 * Generated by Bluespec Compiler, version 2015.09.beta2 (build 34689, 2015-09-07)
 * 
 * On Thu Oct 31 17:09:23 EDT 2019
 * 
 */
#include "bluesim_primitives.h"
#include "mkAdderTest.h"


/* String declarations */
static std::string const __str_literal_3("[RESULT]: Actual Result: %d", 27u);
static std::string const __str_literal_2("[RESULT]: Expected Result: 3", 28u);
static std::string const __str_literal_1("[SIM]: Max cycle reached, simulation ended at cycle %d",
					 54u);
static std::string const __str_literal_4("[SIM]: Test done, simulation ended.", 35u);


/* Constructor */
MOD_mkAdderTest::MOD_mkAdderTest(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_adder(simHdl, "adder", this),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    INST_initialized(simHdl, "initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state(simHdl, "state", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 10u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkAdderTest::init_symbols_0()
{
  init_symbol(&symbols[0u], "_read__h98", SYM_DEF, &DEF__read__h98, 32u);
  init_symbol(&symbols[1u], "adder", SYM_MODULE, &INST_adder);
  init_symbol(&symbols[2u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[3u], "initialized", SYM_MODULE, &INST_initialized);
  init_symbol(&symbols[4u], "RL_checkResult", SYM_RULE);
  init_symbol(&symbols[5u], "RL_finishSimulation", SYM_RULE);
  init_symbol(&symbols[6u], "RL_incrementCycle", SYM_RULE);
  init_symbol(&symbols[7u], "RL_initialize", SYM_RULE);
  init_symbol(&symbols[8u], "RL_insertValue", SYM_RULE);
  init_symbol(&symbols[9u], "state", SYM_MODULE, &INST_state);
}


/* Rule actions */

void MOD_mkAdderTest::RL_incrementCycle()
{
  tUInt32 DEF_x__h182;
  DEF__read__h98 = INST_cycle.METH_read();
  DEF_x__h182 = DEF__read__h98 + 1u;
  INST_cycle.METH_write(DEF_x__h182);
}

void MOD_mkAdderTest::RL_finishSimulation()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,32", &__str_literal_1, 100u);
    dollar_finish(sim_hdl, "32", 0u);
  }
}

void MOD_mkAdderTest::RL_initialize()
{
  INST_initialized.METH_write((tUInt8)1u);
}

void MOD_mkAdderTest::RL_insertValue()
{
  INST_adder.METH_putA(1u);
  INST_adder.METH_putB(2u);
  INST_state.METH_write(1u);
}

void MOD_mkAdderTest::RL_checkResult()
{
  tUInt32 DEF_v__h333;
  tUInt32 DEF_AVMeth_adder_get;
  DEF_AVMeth_adder_get = INST_adder.METH_get();
  DEF_v__h333 = DEF_AVMeth_adder_get;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
    dollar_display(sim_hdl, this, "s,32", &__str_literal_3, DEF_v__h333);
    dollar_display(sim_hdl, this, "s", &__str_literal_4);
    dollar_finish(sim_hdl, "32", 0u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkAdderTest::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state.reset_RST(ARG_rst_in);
  INST_initialized.reset_RST(ARG_rst_in);
  INST_cycle.reset_RST(ARG_rst_in);
  INST_adder.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkAdderTest::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkAdderTest::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_adder.dump_state(indent + 2u);
  INST_cycle.dump_state(indent + 2u);
  INST_initialized.dump_state(indent + 2u);
  INST_state.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkAdderTest::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 5u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h98", 32u);
  num = INST_cycle.dump_VCD_defs(num);
  num = INST_initialized.dump_VCD_defs(num);
  num = INST_state.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_adder.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkAdderTest::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAdderTest &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkAdderTest::vcd_defs(tVCDDumpType dt, MOD_mkAdderTest &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF__read__h98) != DEF__read__h98)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h98, 32u);
	backing.DEF__read__h98 = DEF__read__h98;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF__read__h98, 32u);
      backing.DEF__read__h98 = DEF__read__h98;
    }
}

void MOD_mkAdderTest::vcd_prims(tVCDDumpType dt, MOD_mkAdderTest &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
  INST_initialized.dump_VCD(dt, backing.INST_initialized);
  INST_state.dump_VCD(dt, backing.INST_state);
}

void MOD_mkAdderTest::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkAdderTest &backing)
{
  INST_adder.dump_VCD(dt, levels, backing.INST_adder);
}
