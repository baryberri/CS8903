/*
 * Generated by Bluespec Compiler, version 2015.09.beta2 (build 34689, 2015-09-07)
 * 
 * On Thu Oct 31 17:09:23 EDT 2019
 * 
 */

/* Generation options: */
#ifndef __mkAdder_h__
#define __mkAdder_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkAdder module */
class MOD_mkAdder : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_aFifo_data_0_dummy2_0;
  MOD_Reg<tUInt8> INST_aFifo_data_0_dummy2_1;
  MOD_Wire<tUInt64> INST_aFifo_data_0_dummy_0_0;
  MOD_Wire<tUInt64> INST_aFifo_data_0_dummy_0_1;
  MOD_Wire<tUInt64> INST_aFifo_data_0_dummy_1_0;
  MOD_Wire<tUInt64> INST_aFifo_data_0_dummy_1_1;
  MOD_Wire<tUInt32> INST_aFifo_data_0_lat_0;
  MOD_Wire<tUInt32> INST_aFifo_data_0_lat_1;
  MOD_Reg<tUInt32> INST_aFifo_data_0_rl;
  MOD_Reg<tUInt8> INST_aFifo_deqP_dummy2_0;
  MOD_Reg<tUInt8> INST_aFifo_deqP_dummy2_1;
  MOD_Wire<tUInt8> INST_aFifo_deqP_dummy_0_0;
  MOD_Wire<tUInt8> INST_aFifo_deqP_dummy_0_1;
  MOD_Wire<tUInt8> INST_aFifo_deqP_dummy_1_0;
  MOD_Wire<tUInt8> INST_aFifo_deqP_dummy_1_1;
  MOD_Wire<tUInt8> INST_aFifo_deqP_lat_0;
  MOD_Wire<tUInt8> INST_aFifo_deqP_lat_1;
  MOD_Reg<tUInt8> INST_aFifo_deqP_rl;
  MOD_Reg<tUInt8> INST_aFifo_enqP_dummy2_0;
  MOD_Reg<tUInt8> INST_aFifo_enqP_dummy2_1;
  MOD_Wire<tUInt8> INST_aFifo_enqP_dummy_0_0;
  MOD_Wire<tUInt8> INST_aFifo_enqP_dummy_0_1;
  MOD_Wire<tUInt8> INST_aFifo_enqP_dummy_1_0;
  MOD_Wire<tUInt8> INST_aFifo_enqP_dummy_1_1;
  MOD_Wire<tUInt8> INST_aFifo_enqP_lat_0;
  MOD_Wire<tUInt8> INST_aFifo_enqP_lat_1;
  MOD_Reg<tUInt8> INST_aFifo_enqP_rl;
  MOD_Reg<tUInt8> INST_bFifo_data_0_dummy2_0;
  MOD_Reg<tUInt8> INST_bFifo_data_0_dummy2_1;
  MOD_Wire<tUInt64> INST_bFifo_data_0_dummy_0_0;
  MOD_Wire<tUInt64> INST_bFifo_data_0_dummy_0_1;
  MOD_Wire<tUInt64> INST_bFifo_data_0_dummy_1_0;
  MOD_Wire<tUInt64> INST_bFifo_data_0_dummy_1_1;
  MOD_Wire<tUInt32> INST_bFifo_data_0_lat_0;
  MOD_Wire<tUInt32> INST_bFifo_data_0_lat_1;
  MOD_Reg<tUInt32> INST_bFifo_data_0_rl;
  MOD_Reg<tUInt8> INST_bFifo_deqP_dummy2_0;
  MOD_Reg<tUInt8> INST_bFifo_deqP_dummy2_1;
  MOD_Wire<tUInt8> INST_bFifo_deqP_dummy_0_0;
  MOD_Wire<tUInt8> INST_bFifo_deqP_dummy_0_1;
  MOD_Wire<tUInt8> INST_bFifo_deqP_dummy_1_0;
  MOD_Wire<tUInt8> INST_bFifo_deqP_dummy_1_1;
  MOD_Wire<tUInt8> INST_bFifo_deqP_lat_0;
  MOD_Wire<tUInt8> INST_bFifo_deqP_lat_1;
  MOD_Reg<tUInt8> INST_bFifo_deqP_rl;
  MOD_Reg<tUInt8> INST_bFifo_enqP_dummy2_0;
  MOD_Reg<tUInt8> INST_bFifo_enqP_dummy2_1;
  MOD_Wire<tUInt8> INST_bFifo_enqP_dummy_0_0;
  MOD_Wire<tUInt8> INST_bFifo_enqP_dummy_0_1;
  MOD_Wire<tUInt8> INST_bFifo_enqP_dummy_1_0;
  MOD_Wire<tUInt8> INST_bFifo_enqP_dummy_1_1;
  MOD_Wire<tUInt8> INST_bFifo_enqP_lat_0;
  MOD_Wire<tUInt8> INST_bFifo_enqP_lat_1;
  MOD_Reg<tUInt8> INST_bFifo_enqP_rl;
  MOD_Reg<tUInt32> INST_resultFifo_data_0;
  MOD_Reg<tUInt8> INST_resultFifo_deqP_dummy2_0;
  MOD_Reg<tUInt8> INST_resultFifo_deqP_dummy2_1;
  MOD_Wire<tUInt8> INST_resultFifo_deqP_dummy_0_0;
  MOD_Wire<tUInt8> INST_resultFifo_deqP_dummy_0_1;
  MOD_Wire<tUInt8> INST_resultFifo_deqP_dummy_1_0;
  MOD_Wire<tUInt8> INST_resultFifo_deqP_dummy_1_1;
  MOD_Wire<tUInt8> INST_resultFifo_deqP_lat_0;
  MOD_Wire<tUInt8> INST_resultFifo_deqP_lat_1;
  MOD_Reg<tUInt8> INST_resultFifo_deqP_rl;
  MOD_Reg<tUInt8> INST_resultFifo_enqP_dummy2_0;
  MOD_Reg<tUInt8> INST_resultFifo_enqP_dummy2_1;
  MOD_Wire<tUInt8> INST_resultFifo_enqP_dummy_0_0;
  MOD_Wire<tUInt8> INST_resultFifo_enqP_dummy_0_1;
  MOD_Wire<tUInt8> INST_resultFifo_enqP_dummy_1_0;
  MOD_Wire<tUInt8> INST_resultFifo_enqP_dummy_1_1;
  MOD_Wire<tUInt8> INST_resultFifo_enqP_lat_0;
  MOD_Wire<tUInt8> INST_resultFifo_enqP_lat_1;
  MOD_Reg<tUInt8> INST_resultFifo_enqP_rl;
 
 /* Constructor */
 public:
  MOD_mkAdder(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_upd__h11877;
  tUInt8 DEF_upd__h10208;
  tUInt8 DEF_upd__h9906;
  tUInt8 DEF_upd__h9537;
  tUInt8 DEF_upd__h11450;
  tUInt8 DEF_upd__h9482;
  tUInt8 DEF_upd__h8976;
  tUInt8 DEF_upd__h11041;
  tUInt8 DEF_upd__h8921;
  tUInt8 DEF_n__read__h11876;
  tUInt8 DEF_n__read__h11449;
  tUInt8 DEF_n__read__h11040;
  tUInt8 DEF_IF_resultFifo_deqP_lat_0_whas__2_THEN_resultFi_ETC___d55;
  tUInt8 DEF_x__h10240;
  tUInt8 DEF_y__h9690;
  tUInt8 DEF_IF_bFifo_enqP_lat_0_whas__1_THEN_bFifo_enqP_la_ETC___d34;
  tUInt8 DEF_y__h9129;
  tUInt8 DEF_IF_aFifo_enqP_lat_0_whas__0_THEN_aFifo_enqP_la_ETC___d13;
 
 /* Local definitions */
 private:
  tUInt32 DEF_upd__h10853;
  tUInt32 DEF_upd__h10980;
  tUInt32 DEF_upd__h10602;
  tUInt32 DEF_upd__h10729;
  tUInt32 DEF_IF_bFifo_data_0_lat_0_whas__4_THEN_bFifo_data__ETC___d27;
  tUInt32 DEF_IF_aFifo_data_0_lat_0_whas_THEN_aFifo_data_0_l_ETC___d6;
 
 /* Rules */
 public:
  void RL_aFifo_data_0_canon();
  void RL_aFifo_enqP_canon();
  void RL_aFifo_deqP_canon();
  void RL_bFifo_data_0_canon();
  void RL_bFifo_enqP_canon();
  void RL_bFifo_deqP_canon();
  void RL_resultFifo_enqP_canon();
  void RL_resultFifo_deqP_canon();
  void RL_doAddition();
 
 /* Methods */
 public:
  void METH_putA(tUInt32 ARG_putA_data);
  tUInt8 METH_RDY_putA();
  void METH_putB(tUInt32 ARG_putB_data);
  tUInt8 METH_RDY_putB();
  tUInt32 METH_get();
  tUInt8 METH_RDY_get();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAdder &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkAdder &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkAdder &backing);
};

#endif /* ifndef __mkAdder_h__ */
